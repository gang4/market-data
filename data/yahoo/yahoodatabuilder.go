package yahoo

import (
	"encoding/json"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"time"
)

const (
	src = "https://query1.finance.yahoo.com/v7/finance/chart/"
)

// AutoGenerated -- yahoo quote data
type AutoGenerated struct {
	Chart struct {
		Result []struct {
			Meta struct {
				Currency             string  `json:"currency"`
				Symbol               string  `json:"symbol"`
				ExchangeName         string  `json:"exchangeName"`
				InstrumentType       string  `json:"instrumentType"`
				FirstTradeDate       int     `json:"firstTradeDate"`
				RegularMarketTime    int     `json:"regularMarketTime"`
				Gmtoffset            int     `json:"gmtoffset"`
				Timezone             string  `json:"timezone"`
				ExchangeTimezoneName string  `json:"exchangeTimezoneName"`
				RegularMarketPrice   float64 `json:"regularMarketPrice"`
				ChartPreviousClose   float64 `json:"chartPreviousClose"`
				PriceHint            int     `json:"priceHint"`
				CurrentTradingPeriod struct {
					Pre struct {
						Timezone  string `json:"timezone"`
						Start     int    `json:"start"`
						End       int    `json:"end"`
						Gmtoffset int    `json:"gmtoffset"`
					} `json:"pre"`
					Regular struct {
						Timezone  string `json:"timezone"`
						Start     int    `json:"start"`
						End       int    `json:"end"`
						Gmtoffset int    `json:"gmtoffset"`
					} `json:"regular"`
					Post struct {
						Timezone  string `json:"timezone"`
						Start     int    `json:"start"`
						End       int    `json:"end"`
						Gmtoffset int    `json:"gmtoffset"`
					} `json:"post"`
				} `json:"currentTradingPeriod"`
				DataGranularity string   `json:"dataGranularity"`
				Range           string   `json:"range"`
				ValidRanges     []string `json:"validRanges"`
			} `json:"meta"`
			Timestamp  []int `json:"timestamp"`
			Indicators struct {
				Quote []struct {
					High   []float64 `json:"high"`
					Close  []float64 `json:"close"`
					Open   []float64 `json:"open"`
					Low    []float64 `json:"low"`
					Volume []int     `json:"volume"`
				} `json:"quote"`
				Adjclose []struct {
					Adjclose []float64 `json:"adjclose"`
				} `json:"adjclose"`
			} `json:"indicators"`
		} `json:"result"`
		Error interface{} `json:"error"`
	} `json:"chart"`
}

func buildURL(symbol string, dayRange string, interval string) string {
	return src + symbol + "?range=" + dayRange + "&interval=" + interval
}

// GetYahooData -- get data
func GetYahooData(symbol string, dayRange string, interval string) (*AutoGenerated, error) {
	url := buildURL(getRealSymbol(symbol), dayRange, interval)
	//fmt.Println(url)
	c := &http.Client{
		Timeout: 1 * time.Second,
	}
	resp, err := c.Get(url)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	data, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	var quote AutoGenerated
	err = json.Unmarshal(data, &quote)
	if err != nil {
		return nil, err
	}
	return &quote, nil
}

func getRealSymbol(symbol string) string {
	switch symbol {
	case "spx":
		return "^GSPC"
	case "comp":
		return "^IXIC"
	default:
		return symbol
	}
}

func ReverseOrder(arr []float64) []float64 {
	length := len(arr)
	rt := make([]float64, length)
	for i := 0; i < length; i++ {
		rt[length-(i+1)] = arr[i]
	}
	return rt
}

func ConvertDayRangeToInt(r string) int {
	rtStr := strings.Trim(r, "d")
	rt, err := strconv.Atoi(rtStr)
	if err != nil {
		panic(err)
	}
	return rt
}
